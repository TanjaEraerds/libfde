#ifndef __FORTRES_EXCEPTION_FMOD
#define __FORTRES_EXCEPTION_FMOD


#include "fortres/itfUtil.fpp"
#include "fortres/exception.fpp"
#include "fortres/exception_types.xpp"

#include "fortres/stringref.fmod"
#include "fortres/tracestack.fmod"

      ! Generic wrapper routine around C-Funktion f_try
      ! This routine is a bit tricky, since Fortran still does NOT
      !   * support variable argument lists
      !   * control ByRef/ByVal-argument passing per call
      !   * allow easy void-pointer handling
      !
!_PROC_EXPORT(try__)
      subroutine try__( res, catch, tp, what, tgt, _enum_20(arg) )
        use, intrinsic :: iso_c_binding
        use fde_stringref
        integer(kind=c_int)       :: res
        integer                   :: catch(*)
        type(StringRef_t), target :: what
        type(c_funptr)            :: tp, tgt
        type(c_ptr)               :: _enum_20(arg), whatPtr

        interface
          function c_try_( c, w, tp, tgt, _enum_20(arg), x_ )_cID(f_try)
            use, intrinsic :: iso_c_binding
            use fde_stringref
            integer(kind=c_int),   intent(in) :: c(*) !< catch-list
            type(c_ptr),    value             :: w    !< what-buffer
            type(c_funptr), value, intent(in) :: tp   !< trace procedure
            type(c_funptr), value, intent(in) :: tgt  !< call target
            type(c_ptr),    value, intent(in) :: _enum_20(arg), x_
            integer(kind=c_int)               :: c_try_
          end function
        end interface

        if (len(what) > 0) then; whatPtr = c_loc(what)
                           else; whatPtr = c_null_ptr
        end if

!       have to use pp-definition to avoid line break!
#       define _c_tryCall(p)  catch, whatPtr, tp, p
        res = c_try_( _c_tryCall(tgt), _enum_20(arg), _list_1(_noArg) )
#       undef  _c_tryCall
      end subroutine


      module fde_try_interface
        use fde_stringref
        use iso_c_binding

        ! Using the try-catch mechanism requires an interface definition
        !   matching the subroutine that should be called by try.
        ! The following default interfaces are supported for trying ...
        !   * any subroutine without arguments
        !   * any subroutine accepting one character string
        !   * any subroutine accepting a StringRef_t
        ! To support other subroutines the matching interfaces have to
        !   be provided by extending the try interface separately.
        ! Note that the number of arguments is currently limited to 20!

        interface try
          module procedure try_void, try_chs, try_str
          module procedure try_nt_void, try_nt_chs, try_nt_str
          module procedure try_tp_void, try_tp_chs, try_tp_str
        end interface

        interface
          subroutine try__( res, catch, tp, what, tgt, _enum_20(arg) )
            import StringRef_t, c_int, c_funptr, c_ptr
            integer(kind=c_int)       :: res
            integer                   :: catch(*)
            type(StringRef_t), target :: what
            type(c_funptr)            :: tp, tgt
            type(c_ptr)               :: _enum_20(arg)
          end subroutine
        end interface

        contains

!_PROC_EXPORT(try_void)
        function try_void( _tryArgs ) result(res)
          _tryDecl :: res
          call try__( _tryPass(res), _list_20(_noArg) )
        end function

!_PROC_EXPORT(try_chs)
        function try_chs( _tryArgs, arg ) result(res)
          _tryDecl                  :: res
          character(len=*)          :: arg
          type(StringRef_t), target :: argStr
          argStr = str(arg)
          call try__( _tryPass(res), c_loc(argStr), _list_19(_noArg) )
        end function

!_PROC_EXPORT(try_str)
        function try_str( _tryArgs, arg ) result(res)
          _tryDecl                  :: res
          type(StringRef_t), target :: arg
          call try__( _tryPass(res), c_loc(arg), _list_19(_noArg) )
        end function


!_PROC_EXPORT(try_nt_void)
        function try_nt_void( _tryArgsNT ) result(res)
          _tryDeclNT :: res
          call try__( _tryPassNT(res), _list_20(_noArg) )
        end function

!_PROC_EXPORT(try_nt_chs)
        function try_nt_chs( _tryArgsNT, arg ) result(res)
          _tryDeclNT                :: res
          character(len=*)          :: arg
          type(StringRef_t), target :: argStr
          argStr = str(arg)
          call try__( _tryPassNT(res), c_loc(argStr), _list_19(_noArg) )
        end function

!_PROC_EXPORT(try_nt_str)
        function try_nt_str( _tryArgsNT, arg ) result(res)
          _tryDeclNT                  :: res
          type(StringRef_t), target :: arg
          call try__( _tryPassNT(res), c_loc(arg), _list_19(_noArg) )
        end function


!_PROC_EXPORT(try_tp_void)
        function try_tp_void( _tryArgsTP ) result(res)
          _tryDeclTP :: res
          call try__( _tryPassTP(res), _list_20(_noArg) )
        end function

!_PROC_EXPORT(try_tp_chs)
        function try_tp_chs( _tryArgsTP, arg ) result(res)
          _tryDeclTP                :: res
          character(len=*)          :: arg
          type(StringRef_t), target :: argStr
          argStr = str(arg)
          call try__( _tryPassTP(res), c_loc(argStr), _list_19(_noArg) )
        end function

!_PROC_EXPORT(try_tp_str)
        function try_tp_str( _tryArgsTP, arg ) result(res)
          _tryDeclTP                :: res
          type(StringRef_t), target :: arg
          call try__( _tryPassTP(res), c_loc(arg), _list_19(_noArg) )
        end function
      end module


      module fde_exception
        use fde_stringref
        use fde_tracestack
        use fde_try_interface
        implicit none
        private

#       define _fortres_exception_type(_ident, _num) \
          integer*4, public, parameter :: _ident = int(_same(z)_str(_num));
          _fortres_ExceptionTable
#       undef  _fortres_exception_type

        interface
          subroutine throw_( code, what ) _cID(f_throw)
            use, intrinsic :: iso_c_binding
            import StringRef_t
            integer(kind=c_int), value :: code
            type (StringRef_t)         :: what
          end subroutine

          subroutine push_cleanup_( proc ) _cID(f_push_cleanup)
            use, intrinsic :: iso_c_binding
            type (c_funptr), value, intent(in) :: proc
          end subroutine

          subroutine pop_cleanup_( exec ) _cID(f_pop_cleanup)
            use, intrinsic :: iso_c_binding
            integer(kind=c_int), value :: exec
          end subroutine

          subroutine set_synchronizer_( sync ) _cID(f_set_synchronizer)
            use, intrinsic :: iso_c_binding
            type (c_funptr), value, intent(in) :: sync
          end subroutine

          subroutine get_context_( context, id ) _cID(f_get_context)
            use, intrinsic :: iso_c_binding
            type (c_ptr),  intent(inout) :: context
            integer*4, value, intent(in) :: id
          end subroutine

          subroutine set_traceproc_( tracer ) _cID(f_set_traceproc)
            use, intrinsic :: iso_c_binding
            type (c_funptr), value, intent(in) :: tracer
          end subroutine

          subroutine fmt_exception_( b, c, m ) _cID(f_format_exception)
            import StringRef_t
            type (StringRef_t)           :: b, m !< buffer, message
            integer*4, value, intent(in) :: c    !< exception code
          end subroutine

        end interface

        logical :: SIGINT_ocurred

        public :: try, throw, proc, c_null_ptr
        public :: push_cleanup, pop_cleanup, set_traceproc
        public :: set_synchronizer, get_context
        public :: format_exception, setup_standardExceptions
        public :: interrupt_requested

        public :: StringRef_t, str, strBuf, len

      !-------------------
        contains
      !-------------------

!_PROC_EXPORT(proc)
        function proc( sub ) result(res)
          procedure()     :: sub
          type (c_funptr) :: res
          res = c_funloc( sub )
        end function

!_PROC_EXPORT(throw)
        subroutine throw( code, what )
          implicit none
          integer,          intent(in) :: code
          character(len=*), intent(in) :: what
          call throw_( code, str(what) )
        end subroutine

!_PROC_EXPORT(push_cleanup)
        subroutine push_cleanup( proc )
          procedure() :: proc
          call push_cleanup_( c_funloc(proc) )
        end subroutine

!_PROC_EXPORT(pop_cleanup)
        subroutine pop_cleanup( callHandler )
          logical, optional :: callHandler
          logical           :: callHandler_ = .true.
          if (present(callHandler)) callHandler_ = callHandler
          call pop_cleanup_( merge(1,0,callHandler_) )
        end subroutine

!_PROC_EXPORT(set_synchronizer)
        subroutine set_synchronizer( sync )
          procedure() :: sync
          call set_synchronizer_( c_funloc( sync ) )
        end subroutine

!_PROC_EXPORT(get_context)
        subroutine get_context( context, id )
          type (c_ptr), intent(inout) :: context
          integer*4,    intent(in)    :: id
          call get_context_( context, id )
        end subroutine

!_PROC_EXPORT(set_traceproc)
        subroutine set_traceproc( tracer )
          procedure() :: tracer
          call set_traceproc_( c_funloc(tracer) )
        end subroutine

!_PROC_EXPORT(format_exception)
        subroutine format_exception( buf, code, msg )
          character(len=*)             :: buf
          integer,          intent(in) :: code
          character(len=*), intent(in) :: msg
          call fmt_exception_( strBuf(buf), code, str(msg) )
        end subroutine


!_PROC_EXPORT(setup_standardExceptions)
        subroutine setup_standardExceptions( catch_SIGINT )
          _use_if_INTEL(ifport)
          ! catch_SIGINT:
          !   .false. => don't catch SIGINT
          !   .true.  => notify caught SIGINT
          !   missing => handle SIGINT by exception
          logical, optional :: catch_SIGINT
          integer           :: code_

# if defined __INTEL_COMPILER
#         define _signal     signalqq
#         define _SIGABRT    SIG$ABORT
#         define _SIGTERM    SIG$TERM
#         define _SIGILL     SIG$ILL
#         define _SIGSEGV    SIG$SEGV
#         define _SIGINT     SIG$INT
#         define _SIGFPE     SIG$FPE

# else
#         define _signal     signal
#         define _SIGABRT     6
#         define _SIGTERM    15
#         define _SIGILL      4
#         define _SIGSEGV    11
#         define _SIGINT      2
#         define _SIGFPE      8
# endif
          code_ = _signal( _SIGABRT, handle_abort )
          code_ = _signal( _SIGTERM, handle_term )
          code_ = _signal( _SIGILL,  handle_ill )
          code_ = _signal( _SIGSEGV, handle_segv )
          code_ = _signal( _SIGFPE,  handle_fpe )

          SIGINT_ocurred = .false.
          if (.not. present(catch_SIGINT)) then
            code_ = _signal( _SIGINT, handle_int )
          elseif (catch_SIGINT) then
            code_ = _signal( _SIGINT, notify_int )
          end if
        end subroutine

        integer*4 function handle_abort( signum )
          !DIR$ ATTRIBUTES C :: handle_abort
          integer*2 :: signum
          handle_abort = 1
          call throw( AbortExecution, 'handle_abort' )
        end function

        integer*4 function handle_term( signum )
          !DIR$ ATTRIBUTES C :: handle_term
          integer*2 :: signum
          handle_term = 1
          call throw( TerminateExecution, 'handle_term' )
        end function

        integer*4 function handle_ill( signum )
          !DIR$ ATTRIBUTES C :: handle_ill
          integer*2 :: signum
          handle_ill = 1
          call throw( IllegalInstruction, 'handle_ill' )
        end function

        integer*4 function handle_segv( signum )
          !DIR$ ATTRIBUTES C :: handle_segv
          integer*2 :: signum
          handle_segv = 1
          call throw( SegmentationFault, 'handle_segv' )
        end function

        integer*4 function handle_fpe( signum )
          !DIR$ ATTRIBUTES C :: handle_fpe
          integer*2 :: signum
          handle_fpe = 1
          call throw( FloatingPointError, 'handle_fpe' )
        end function

        integer*4 function handle_int( signum )
          !DIR$ ATTRIBUTES C :: handle_int
          integer*2 :: signum
          handle_int = 1
          call throw( KeyboardInterrupt, 'handle_int' )
        end function

        integer*4 function notify_int( signum )
          !DIR$ ATTRIBUTES C :: notify_int
          integer*2 :: signum
          notify_int = 1
          ! Due to Windows special handling of SIGINT
          !  (it uses another thread to deliver this signal [WTH!!?])
          !  we can't handle it like the other signals.
          ! So, we just set a flag which the main program can poll by
          !   calling interrupt_requested() to detect and handle SIGINT.
          SIGINT_ocurred = .true.
        end function


!_PROC_EXPORT(interrupt_requested)
        logical function interrupt_requested( code )
          integer, optional :: code
          integer           :: code_

          if (present(code)) then; code_ = code
                             else; code_ = KeyboardInterrupt
          end if

          interrupt_requested = SIGINT_ocurred
          if (interrupt_requested) then
            ! prevent race condition by clearing the flag
            !   only if it was set!
            SIGINT_ocurred = .false.
            if (code_ /= 0) then
              call throw( code_, 'handle_int' )
            end if
          end if
        end function
      end module

#endif

