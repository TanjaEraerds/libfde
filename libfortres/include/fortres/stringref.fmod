#ifndef __FORTRES_STRINGREF_FMOD
#define __FORTRES_STRINGREF_FMOD

#if !defined _MODULENAME_stringref
# define _MODULENAME_stringref  stringref
#endif

#include "fortres/itfUtil.fpp"

      module _MODULENAME_stringref
        use, intrinsic :: iso_c_binding
        implicit none
        private
      
        type, bind(C) :: StringRef_t
          type (c_ptr)           :: loc = c_null_ptr
          integer(kind=c_size_t) :: len = 0
        end type
      
        interface str
          module procedure stringref_of_str_trim, stringref_of_str
          module procedure stringref_to_str
        end interface

        interface strBuf
          module procedure stringref_of_buf
        end interface
      
        interface len
          module procedure stringref_len
        end interface
      
        public :: StringRef_t, str, strBuf, len

        character(len=0), private, target :: empty_string_ = ""
      
      !-------------------
        contains
      !-------------------

!_PROC_EXPORT(stringref_create)
        function stringref_create() result(strRef)
          type (StringRef_t) :: strRef
          strRef%loc = c_null_ptr
          strRef%len = 0
        end function


!_PROC_EXPORT(stringref_of_str_trim)
        function stringref_of_str_trim( fstr, trimLen ) result(strRef)
          character(len=*), intent(in) :: fstr
          logical                      :: trimLen
          type (StringRef_t)           :: strRef

          ! NOTE: gfortran doesn't allow to use c_loc on character strings.
          !       We fix this by a little wrapper function that usually gets inlined.
          if (len(fstr) > 0) then
            strRef%loc = get_string_loc_(fstr)
            if (trimLen) then; strRef%len = len_trim(fstr)
                         else; strRef%len = len(fstr)
            end if
          end if

          contains
            function get_string_loc_( fstr ) result(loc)
              character(len=1), target, intent(in) :: fstr
              type (c_ptr)                         :: loc
              loc = c_loc(fstr)
            end function
        end function


!_PROC_EXPORT(stringref_of_str)
        function stringref_of_str( fstr ) result(strRef)
          character(len=*), optional, intent(in) :: fstr
          type (StringRef_t)                     :: strRef
          if (present(fstr)) then
            strRef = stringref_of_str_trim( fstr, .true. )
          end if
        end function


!_PROC_EXPORT(stringref_of_buf)
        function stringref_of_buf( fstrBuf ) result(strRef)
          character(len=*),  intent(in) :: fstrBuf
          type (StringRef_t)            :: strRef
          strRef = stringref_of_str_trim( fstrBuf, .false. )
        end function


!_PROC_EXPORT(stringref_to_str)
        function stringref_to_str( strRef ) result(fptr)
          type (StringRef_t),     intent(in) :: strRef
          character(len=strRef%len), pointer :: fptr
          if (strRef%len > 0) then
            call c_f_pointer( strRef%loc, fptr )
          else
            fptr => empty_string_
          end if
        end function


!_PROC_EXPORT(stringRef_to_char)
        function stringRef_to_char( strRef ) result(cstr)
          type (StringRef_t), intent(in) :: strRef
          character(len=strRef%len)      :: cstr
          cstr = str(strRef)
        end function


        pure function stringref_len( strRef ) result(l)
          type (StringRef_t), intent(in) :: strRef
          integer*4                      :: l
          l = strRef%len
        end function
      
      end module

#endif

